server {
    listen      80;
    listen [::]:80;
    return 302 https://$host$request_uri;
}

server {
    listen 443 ssl;
    listen [::]:443 ssl;
    server_name health.efiss.tech;
    include /etc/nginx/snippets/ssl-certs.conf;

    location / {
        check_status;
    }
}

upstream ai_servers {
    zone ai_servers 64k;

    server localhost:5000 max_fails=2 fail_timeout=5s;
    server localhost:5001 backup;

    # health_check uri=/ping interval=5s timeout=3s rise=5 fall=2;  # <-- this is for Nginx-Plus only, we are using Open-Source check health module for nginx
    check interval=5000 timeout=3000 rise=5 fall=2 type=http;   
    check_http_send "GET /ping HTTP/1.0\r\n\r\n";
}

server {
    listen 443 ssl;
    listen [::]:443 ssl;
    server_name be.efiss.tech;
    include /etc/nginx/snippets/ssl-certs.conf;

    location / {
        # add_header 'Access-Control-Allow-Origin' '*';
        client_max_body_size 1G;
        include /etc/nginx/snippets/services_proxy.conf;
        proxy_pass              http://localhost:3000;
    }
}

server {
    listen 443 ssl;
    listen [::]:443 ssl;

    server_name ai.efiss.tech;
    include /etc/nginx/snippets/ssl-certs.conf;

    location / {
        # add_header 'access-control-allow-origin' '*';
        client_max_body_size 1G;
        include /etc/nginx/snippets/services_proxy.conf;
        proxy_next_upstream     error timeout invalid_header http_500;
        proxy_connect_timeout   2;

        proxy_pass              http://ai_servers;
    }
}
